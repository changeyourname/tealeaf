1. munsters.each {|key, value| value['gender'] == "male" ? total += value['age'] : nil }

2. 

index = 0
munsters = munsters.each {|key, value| value[:original] = index; index +=1}
munsters = munsters.each {|key, value| value[:length_order] = key.length}

3. munsters.each {|key, value| puts "#{key} is a #{value['age']} year old #{value['gender']}."}

4. 

def better_method(a_string_param, an_array_param)
  a_string_param += "rutabega"
  an_array_param += ["rutabega"]

  return a_string_param, an_array_param
end

my_string = "pumpkins"
my_array = ["pumpkins"]
a_string_param, an_array_param = better_method(my_string, my_array)

puts "My string looks like this now: #{my_string}"
puts "My array looks like this now: #{my_array}"

5.

sentence.split.each {|word| new_sentence.insert(0,word + ' ') }

6. 34, the answer variable is unchanged by all the "messing"

7. Yes, the data is corrupted. The munsters object is passed into the method and then subsequently altered. It would be different if the method had taken the values and assigned them to locally-scoped variables or hashes. Oops. 

8. 

class String
	def pretty_ellipses (length)
		result = self.dup
		initial_length = self.length
		if initial_length > length 
			while result.length > (length - 3) do
				words = result.split
				words.pop
				result = words.join(" ")
			end
			result << "..."
			return result
		else
			return result
		end
	end
end

some_string = 'Fourscore and seven years ago our forefathers'

puts some_string.pretty_ellipses(32)

9. paper

10. no

